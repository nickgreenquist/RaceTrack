using UnityEngine;
using System.Collections;
using System.Collections.Generic;


//[RequireComponent(typeof(Steer))]
[RequireComponent(typeof(CharacterController))]
//[RequireComponent(typeof(SteeringAttributes))]

public class SteeringPerson : MonoBehaviour {
	
	//movement variables - exposed in inspector panel
	private Vector3 target;
	
	public int targetIndex = 0;
	
	//reference to an array of obstacles
	private  GameObject[] obstacles; 
		
	private  List<GameObject> flockers;	
	
	public GameManager manager;
	
	
	
	public float gravity = 20.0f; // keep us grounded
	
	private Vector3 prediction;
	private Vector3 predictedLoc;
	public float maxSpeed;
	bool pitStop;
	
	// Each vehicle contains a CharacterController which helps to deal with
	// the relationship between movement initiated by the character and the forces
	// generated by contact with the terrain & other game objects.
	private CharacterController characterController;
	
	// the SteeringAttributes holds several variables needed for steering
	private SteeringAttributes attr;
	
	// the Steer component implements the basic steering functions
	private SteerCrew steer;
	
	private Vector3 acceleration;	//change in velocity per second
	private Vector3 velocity;		//change in position per second
	public Vector3 Velocity {
		get { return velocity; }
		set { velocity = value;}
	}
	
	public Vector3 Target {
		get { return target; }
		set { target = value;}
	}
	
	void Start ()
	{
		acceleration = Vector3.zero;
		velocity = transform.forward;
		obstacles = GameObject.FindGameObjectsWithTag ("Obstacle");	
		
		
		//get component references
		characterController = gameObject.GetComponent<CharacterController> ();
		steer = gameObject.GetComponent<SteerCrew> ();
		
		GameObject main = GameObject.Find ("MainGO");
		attr = main.GetComponent<SteeringAttributes>();
		manager = main.GetComponent<GameManager>();

		pitStop = true;
		maxSpeed = 40;
		Target = transform.position;
	}
	
	void Update () 
	{
		if(manager.pitUsed)
		{
			pitStop = true;
		}
		else
		{
			pitStop = false;
		}

		if(pitStop)
		{
			Target = manager.pitCar.position;
		}
		else
		{
			Target = GameObject.FindGameObjectWithTag("crew").transform.position;
		}

		CalcSteeringForce ();
		//update velocity
		velocity += acceleration * Time.deltaTime;
		velocity.y = 0;	// we are staying in the x/z plane
		
		
		//orient the transform to face where we going
		if (velocity != Vector3.zero)
			transform.forward = velocity.normalized;
		
		// keep us grounded
		velocity.y -= gravity * Time.deltaTime;
		
		velocity = Vector3.ClampMagnitude (velocity, maxSpeed);

		if(Vector3.Distance(Target,transform.position) < 10)
		{
			velocity = Vector3.zero;
		}
		// the CharacterController moves us subject to physical constraints
		characterController.Move (velocity * Time.deltaTime);
		
		//reset acceleration for next cycle
		acceleration = Vector3.zero;
	}
	
	
	//calculate and apply steering forces
	private void CalcSteeringForce ()
	{ 
		Vector3 force = Vector3.zero;

		/*
		//obstacles
		for (int i=0; i<obstacles.Length; i++)
		{	
			force += attr.avoidWt * steer.AvoidObstacle (obstacles[i], attr.avoidDist);
		}
		//Debug.DrawRay (transform.position, force, Color.cyan);
		*/
		
		//in bounds
		//force += attr.inBoundsWt * steer.StayInBounds (120, Vector3.zero);
		
		//seek target
		
		//check to see if they are close, then seek the next waypoint
		force += attr.seekWt * 2 * steer.Seek (target);
		
		//allign
		//force += attr.seekWt * 3 * steer.Allignment(manager.getDirection());	
		
		//seperate
		flockers = manager.getCrew();
		force += attr.avoidWt * 2 * steer.Seperation(flockers);
		
		//cohesion
		//force += attr.seekWt / 5 * steer.Cohesion(manager.getCentroid());
		
		force = Vector3.ClampMagnitude (force, attr.maxForceP);
		
		ApplyForce(force);
	}
	
	
	private void ApplyForce (Vector3 steeringForce)
	{
		acceleration += steeringForce/attr.mass;
	}
}

using UnityEngine;
using System.Collections;
using System.Collections.Generic;


//[RequireComponent(typeof(Steer))]
[RequireComponent(typeof(CharacterController))]
//[RequireComponent(typeof(SteeringAttributes))]

public class SteeringVehicle : MonoBehaviour {

//movement variables - exposed in inspector panel
	private Vector3 target;
	
	public int targetIndex = 0;
	
	//reference to an array of obstacles
	private  GameObject[] obstacles; 
	
	private List<GameObject> wayPoints;
	bool blackWP;

	int passingTimer;
	int speedBoostTimer;
	bool passing;
	bool speedBoost;
	float gas;
	bool pitStop;
	int stopTimer;

	
	private  List<GameObject> flockers;
	
	
	public GameManager manager;
	
	
	
	public float gravity = 20.0f; // keep us grounded
	
	private Vector3 prediction;
	private Vector3 predictedLoc;
	int curWP;
	public float maxSpeed;
	
	// Each vehicle contains a CharacterController which helps to deal with
	// the relationship between movement initiated by the character and the forces
	// generated by contact with the terrain & other game objects.
	private CharacterController characterController;
	
	// the SteeringAttributes holds several variables needed for steering
	private SteeringAttributes attr;

	// the Steer component implements the basic steering functions
	private Steer steer;

	private Vector3 acceleration;	//change in velocity per second
	private Vector3 velocity;		//change in position per second
	public Vector3 Velocity {
		get { return velocity; }
		set { velocity = value;}
	}

	public Vector3 Target {
		get { return target; }
		set { target = value;}
	}
	
	void Start ()
	{
		acceleration = Vector3.zero;
		velocity = transform.forward;
		obstacles = GameObject.FindGameObjectsWithTag ("Obstacle");	
		
		
		//get component references
		characterController = gameObject.GetComponent<CharacterController> ();
		steer = gameObject.GetComponent<Steer> ();
		
		GameObject main = GameObject.Find ("MainGO");
		attr = main.GetComponent<SteeringAttributes>();
		manager = main.GetComponent<GameManager>();
		
		curWP = -1;
		passingTimer = 0;
		speedBoostTimer = 0;
		passing = false;
		speedBoost = false;

		blackWP = true;
		if(tag.Equals("white"))
		{
			blackWP = false;
		}
		maxSpeed = attr.maxSpeed;
		gas = Random.Range(0,100);
		pitStop = false;

	}
	
	void Update () 
	{
		if(manager.raceStart)
		{
		gas--;
		if(curWP == 1 && gas < 0 && !manager.pitUsed)
		{
			pitStop = true;
			maxSpeed = 50;
			manager.pitUsed = true;
			manager.pitCar = transform;
		}

		passingTimer++;
		speedBoostTimer++;

		//see if the car should speed up
		RaycastHit hit;
		Vector3 higherPos = new Vector3();
		higherPos.x = transform.position.x;
		higherPos.y = transform.position.y + 3;
		higherPos.z = transform.position.z;
		Ray passingRay = new Ray(higherPos,transform.forward);

		Debug.DrawRay(higherPos, transform.forward*150);


		if(Physics.Raycast(passingRay, out hit, 150))
		{
			if(hit.collider.tag == "white" || hit.collider.tag == "black")
			{
				speedBoost = true;
				speedBoostTimer = 0;
			}
		}

		if(speedBoost)
		{
			speedBoostTimer++;
			maxSpeed = 200;

		}
		else
		{
			maxSpeed = attr.maxSpeed;
		}

		if(speedBoostTimer > 360)
		{
			speedBoostTimer = 0;
			speedBoost = false;
			maxSpeed = attr.maxSpeed;
		}


		//see if the car should pass
		RaycastHit hit2;
		Vector3 higherPos2 = new Vector3();
		higherPos2.x = transform.position.x;
		higherPos2.y = transform.position.y + 3;
		higherPos2.z = transform.position.z;
		Ray passingRay2 = new Ray(higherPos2,transform.forward);

		Debug.DrawRay(higherPos2, transform.forward*30);

		if(Physics.Raycast(passingRay2, out hit, 30))
		{
			if(hit.collider.tag == "white" || hit.collider.tag == "black")
			{
				passing = true;
				if(passingTimer > 240)
				{
					blackWP = !blackWP;
					curWP+=2;
					passingTimer = 0;
				}
			}
		}

		/*
		timer++;
		if(timer > 240)
		{
			blackWP = !blackWP;
			timer = 0;
			curWP++;
		}

		 */

		if(blackWP)
		{
			wayPoints = manager.getWayPointsB();
		}
		else
		{
			wayPoints = manager.getWayPointsW();
		}

		
		//path following code
		prediction = velocity;
		prediction.Normalize();
		prediction *= 25;
		
		predictedLoc = transform.position + prediction;
		
		Vector3 normal;
		Vector3 target;
		float worldRecord  =10000; 
		
		int first;
		int last;
		if(curWP >= 0)
		{
			first = curWP - 1;
			if(first == -1)
			{
				first = wayPoints.Count - 1;
			}
			last = (first + 3);
		}
		else
		{
			first = 0;
			last = wayPoints.Count;
		}
		
		for(int i = first; i<last; i++)
		{
			Vector3 pathStart = wayPoints[i%wayPoints.Count].transform.position;
			Vector3 a = predictedLoc - pathStart;
			Vector3 pathEnd = wayPoints[(i+1)% wayPoints.Count].transform.position;
			Vector3 b = pathEnd - pathStart;
			//float theta = Vector3.Angle(a,b);
			//float d = a.magnitude * Mathf.Cos(theta);
			b.Normalize();
			b *= (Vector3.Dot(a,b));
			normal = pathStart + b;
			
			if(normal.x < Mathf.Min(pathStart.x,pathEnd.x) || normal.x > Mathf.Max(pathStart.x, pathEnd.x) || normal.z < Mathf.Min(pathStart.z, pathEnd.z) || normal.z > Mathf.Max(pathStart.z, pathEnd.z))
			{
				normal = pathEnd;
				pathStart = wayPoints[(i+1)% wayPoints.Count].transform.position;
				pathEnd = wayPoints[(i+2)% wayPoints.Count].transform.position;
			}
			float distance = Vector3.Distance(predictedLoc,normal);
			
			if(distance < worldRecord)
			{
				worldRecord = distance;
				Target = normal;
				curWP = (i+1)% wayPoints.Count;
			}
		}

		if(pitStop)
		{
			Target = GameObject.FindGameObjectWithTag("pit").transform.position;
		}

		CalcSteeringForce ();
		
		//update velocity
		velocity += acceleration * Time.deltaTime;
		velocity.y = 0;	// we are staying in the x/z plane
		
		
		//orient the transform to face where we going
		if (velocity != Vector3.zero)
			transform.forward = velocity.normalized;

		// keep us grounded
		velocity.y -= gravity * Time.deltaTime;


		if(pitStop)
		{
			if(Vector3.Distance(Target,transform.position) < 20)
			{
				gas = 10000;
				stopTimer++;
				maxSpeed = 0;
				velocity = Vector3.zero;
				if(stopTimer > 420)
				{
					pitStop = false;
					stopTimer = 0;
					curWP+=2;
					manager.pitUsed = false;
				}
			}
		}


		// the CharacterController moves us subject to physical constraints
		characterController.Move (velocity * Time.deltaTime);
		
		//reset acceleration for next cycle
		acceleration = Vector3.zero;
		}
	}
	
	
	//calculate and apply steering forces
	private void CalcSteeringForce ()
	{ 
		Vector3 force = Vector3.zero;
		
/*
		//obstacles
		for (int i=0; i<obstacles.Length; i++)
		{	
			force += attr.avoidWt * steer.AvoidObstacle (obstacles[i], attr.avoidDist);
		}
		Debug.DrawRay (transform.position, force, Color.cyan);
*/
	 
		//in bounds
		//force += attr.inBoundsWt * steer.StayInBounds (120, Vector3.zero);
		
		//seek target
		
		//check to see if they are close, then seek the next waypoint
		force += attr.seekWt * steer.Seek (target);
		
		//allign
		//force += attr.seekWt * 3 * steer.Allignment(manager.getDirection());	
		
		//seperate
		flockers = manager.getCars();
		force += attr.avoidWt * steer.Seperation(flockers);
		
		//cohesion
		//force += attr.seekWt / 5 * steer.Cohesion(manager.getCentroid());

		force = Vector3.ClampMagnitude (force, attr.maxForce);
		
		ApplyForce(force);
	}

	
	private void ApplyForce (Vector3 steeringForce)
	{
		acceleration += steeringForce/attr.mass;
	}
}
